

/* 
   In CSS, if there are 2 or more styling instructions that are conflicting, the last 
   one is used, if they have the same specificity (this concept is called cascade). 

   Even when 2 CSS instructions are conflicting, if the former one has more specificity,
   that instruction wins even though it's placed before the 2nd one (this is called specificity).
   For example, a class selector (e.g. .class_name {} ) has more weight than an element selector
   (e.g. h1 {} ).
   Note that only a conflicting property is overriden. This helps to avoid repetition of CSS.
   The specificity of CSS selector is score-based. For example, inline style="..." attribute
   directly inside an element earns 1,000 points. Or, give +100 points for each ID selector
   contained in an overall selector, e.g. h2 ul #id_name #id_name2 {} gets 200 points (+ 2 
   points for the 2 element selectors).
   For more rules, see the website below. In actual settings, you don't need to lower specificity
   levels, because to beat 1 ID selector, you need 10 class selectors, for example.
   There is a keyword that makes a rule with it supercedes any specificities, which is
   "!important". For example, p {color: green !important;} always overrides any conflicting rules
   , unless another rule also uses "!important" keyword, inside a selector with equal or more 
   specificity than the 1st one, or that comes after the 1st one. But "!important" is advised
   not to be used, since it breaks usual cascading rules.

   There is another concept in CSS called inheritance. It means some CSS instructions applied
   to an (html) element are inherited to its child elements, such as "color" and "font-family".
   But some are not inherited, such as "width".
   Every CSS property (e.g. color) can take inheritance controlling keywords, such as "inherit".
   E.g. 
   p {
     color: inherit;
   }

   This concept of specificity, cascading, and inheritance are explained in 
   https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance
*/

/* 
   In this CSS, to adjust block sizes for both laptop/desktop and smartphone, I make all the 
   length units relative to the width/height of the viewport.
   When % is used, it's relative to some parent size or block width, and they are relative to
   the viewport size, thus % also becomes relative to the viewport size.
   
   But it's a dangerous idea to set font-size only with viewport size, since in that case, 
   website users cannot zoom into the characters (they stay relative to the viewport size).
   To avoid that problem, for font-size, we should use a combination of some absolute unit
   (such as pixel, or rem (root (<html> element) font-size), if the root has some absolute 
   font-size) + a viewport unit, e.g. font-size: calc(1.5rem + 3vw);
   See https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Responsive_Design#using_viewport_units_for_responsive_typography
*/

/* || page-specific styles. Specific to profile.html */
/* || header style */

h2 {
    font-size: calc(2rem + 1.5vmin);
    /* avoid setting font-size only with units relative to viewport size */
    
    margin: 0;
    padding: 0vmin 2vmin 1vmin;    	/* top, right and left, bottom paddings */
    color: #00539F;
}

.prof_img {
    float: right;
    max-height: 40vh;
    margin: 0 0 2vh 2vw;
}

.self_info {
    font-size: calc(1rem + 0.7vw);
    color: #00539F;
}

main {
    display: flow-root;
}

/* || navigation bar style */

